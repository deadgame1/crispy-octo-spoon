{% extends 'base.html.twig' %}
{% block body %}
    <div class="test">
        <h1 class="text-color-class">Stocks Application</h1>
        <br>
        <div>
            Upload Stock data csv : <br>
            <input type="file">
            <button id="uploadcsv" class="btn btn-primary" type="submit" data-url="{{ app.request.getSchemeAndHttpHost() }}">Submit</button>
        </div>
        <hr>
        <h3 class="text-color-class" style="margin-top: 50px;">Enter details</h3>
        <div class="horizontal_form">
            <div>
                <label class="form-label" for="stockName">Stock name:</label><br>
                <div class="autocomplete" style="width:300px;">
                    {# <input id="myInput" type="text" name="myCountry" placeholder="Country"> #}
                    <input class="form-control" type="text" id="stockName" name="stockName">
                </div>
            </div>
            <div>
                <label class="form-label" for="startDate">Start date:</label>
                <input class="form-control" type="date" id="startDate" name="startDate">
            </div>
            <div>
                <label class="form-label" for="endDate">End date:</label>
                <input class="form-control" type="date" id="endDate" name="endDate">
            </div>
            <div>
                <label class="form-label" for="quantity">Quantity Of Stocks:</label>
                <input class="form-control" type="number" id="quantity" name="quantity" value=200>
                <small>(Default 200)</small>
            </div>
            <button id="getstats" style="margin-top:30px" class="btn btn-primary">Submit</button>
        </div>
        <div id="help">

        </div>
        <hr>
        <div style="margin-top:50px;">
            <h3 class="text-color-class">Statistics</h3>
            <h5 id="statsFor"></h5>
            <div id="noStats"></div>
            
            <div id="stats">
                <ul id='txn2'>
                
                </ul>
                <div class="table-responsive-md" style="max-width:1000px;display: flex;">
                    <table class="table table-bordered table-sm">
                        <thead >
                            <tr style="font-size: 15px;">
                                <th scope="col">Transaction Number</th>
                                <th scope="col">Transaction Type</th>
                                <th scope="col">Date</th>
                                <th scope="col">Price per stock</th>
                                <th scope="col">Profit per stock</th>
                                <th scope="col">Profit <small id="stocksele"></small></th>
                            </tr>
                        </thead>
                        <tbody id='txn'>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div id="loader">
        <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
    </div>
   
    <script>
        const loader= document.getElementById('loader')
        const help= document.getElementById('help')
        const noStats = document.getElementById('noStats')
        const stats = document.getElementById('stats')
        const stockNameEle = document.getElementById('stockName')
        let noOfstocks = 200 

        $("#uploadcsv").click(function(){
            loader.style.display='flex';
            const formData = new FormData();
            const fileField = document.querySelector('input[type="file"]');
            formData.append('csv', fileField.files[0]);

            fetch('/postCsv', {
                method: 'POST',
                body: formData
            })
            .then(
                response => {
                    return response.json();
                }
            )
            .then(result => {
                let x = JSON.stringify(result)
                let msg = JSON.parse(x);
                stockNameEle.dataset.stockNames = msg.allStocks
                loader.style.display='none';
                alert('Message: '+JSON.stringify(msg.message))
                console.log('Message:', JSON.stringify(result));
            })
            .catch(error => {
                loader.style.display='none';
                alert('Error :(')
                console.error('Error:', JSON.stringify(error));
            });
        });
        $("#getstats").click(function(){
            loader.style.display='flex';
            const sd = document.querySelector('#startDate').value;
            const ed = document.querySelector('#endDate').value;
            const stockName = document.querySelector('#stockName').value;
            const stockQuantity = document.querySelector('#quantity').value;
            if(!stockName){ //@todo uncomment
                help.innerHTML = 'Please enter stock name';
                return;
            }
            if(!sd){
                help.innerHTML = 'Please enter start date';
                return;
            }
            if(!ed){
                help.innerHTML = 'Please enter end date';
                return;
            }
            let sdo = new Date(sd);
            let edo = new Date(ed);
            let today = new Date();
            if(sdo > edo){
                help.innerHTML = 'Start date should be less than End date';
                return;
            }
            help.innerHTML = '';
            //console.log(sdo.toISOString().slice(0,10),edo.toISOString().slice(0,10));return;
            fetch('/stockAdvice?'+ new URLSearchParams({
                stock: stockName,//@todo uncomment
                startDate: sdo.toISOString().slice(0,10),
                endDate: edo.toISOString().slice(0,10),
                stock: 'aapl',//@todo delete hardcoded
                // startDate: '2000-03-01',
                // endDate: '2022-03-01',
                // noOfStocks: stockQuantity ? stockQuantity : 200,
            }))
            .then(response => response.json())
            .then(result => {
                loader.style.display='none';
                let x = JSON.stringify(result)
                let msg = JSON.parse(x);
                if(msg.error){
                    stats.style.display='none';
                    noStats.style.display='block';
                    noStats.innerHTML = msg.error;
                    console.log('error')
                    return;
                }else{
                    //success
                    console.log('success')
                    stats.style.display="block";
                    noStats.style.display="none";
                    document.querySelector('#statsFor').textContent = `for ${msg.name}`

                    let list = document.querySelector('#txn2')
                    list.innerHTML=''
                    let totalProfit = document.createElement("li")
                    totalProfit.textContent = 'Total Profit : '+msg.totalProfit
                    let deviation = document.createElement("li")
                    deviation.textContent = 'Standard Deviation : '+msg.standardDeviation
                    let meanPrice = document.createElement("li")
                    meanPrice.textContent = 'Mean Price : '+msg.meanPrice
                    list.appendChild(totalProfit)
                    list.appendChild(deviation)
                    list.appendChild(meanPrice)

                    document.querySelector('#stocksele').textContent = `for ${noOfstocks} stocks`
                    
                    let table = document.querySelector('#txn')
                    table.innerHTML=''
                    let html='';
                    let i=0;let j=0;
                    msg.transactionalData.forEach(element => {
                        let eleclass = (j % 2 == 1) ? 'tr1' : 'tr2';
                        html += `<tr class=${eleclass}>
                            <td>#${i++}</td>
                            <td>Buy</td>
                            <td>${element.buyDate}</td>
                            <td>${element.buyPrice}</td>
                            <td></td>
                            <td></td>
                        </tr>`;

                        html += `<tr class=${eleclass}>
                            <td>#${i++}</td>
                            <td>Sell</td>
                            <td>${element.sellDate}</td>
                            <td>${element.sellPrice}</td>
                            <td>${element.profit}</td>
                            <td>${element.netProfitForThisTxn}</td>
                        <tr>`;
                        j++
                    });
                    table.innerHTML = html;
                    table.innerHTML += `<tr><td></td><td></td><td></td><td></td><td></td><td id="totalProfitEle">${msg.totalProfit} <small>(Total Profit)</small></td></tr>`;
                }
            })
            .catch(error => {
                loader.style.display='none';
                stats.style.display='none';
                noStats.style.display='block';
                console.log('catch')
                console.log(error)
                noStats.innerHTML = 'Error';
            });
            
        });


        function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
            }
        }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
        }
    </script>
    <style>
        #help{
            color: red;
        }
        .test{
            padding: 20px 40px;
        }
        .horizontal_form{
            display:flex;
            margin: 25px 0;
            align-items: flex-start;
            flex-wrap: wrap;
        }
        .horizontal_form div{
            margin-right: 20px; 
            margin-bottom: 15px;
        }
        #loader{
            position:fixed;
            padding:0;
            margin:0;

            top:0;
            left:0;

            width: 100%;
            height: 100%;
            background:rgba(255,255,255,0.5);
            opacity: 0.8;    
            display: none;
            align-items: center;
            justify-content: center;
        }
        #noStats{
            color:red;
        }

        .lds-ring {
            display: block;
            width: 80px;
            height: 80px;
            position: absolute;
        }
        .lds-ring div {
            box-sizing: border-box;
            display: block;
            position: absolute;
            width: 64px;
            height: 64px;
            margin: 8px;
            border: 8px solid #fff;
            border-radius: 50%;
            animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
            border-color: #000 transparent transparent transparent;
        }
        .lds-ring div:nth-child(1) {
            animation-delay: -0.45s;
        }
        .lds-ring div:nth-child(2) {
            animation-delay: -0.3s;
        }
        .lds-ring div:nth-child(3) {
            animation-delay: -0.15s;
        }
        @keyframes lds-ring {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
        #txn2{
            display: flex;
            align-items: center;
            flex-wrap:wrap;
        }
        #txn2 li{
            flex: 0 0 250px;
        }
        #totalProfitEle{
            background: #80808078;
            color: black;
        }
        .text-color-class{
            color: #003285;
        }
        #statsFor{
            margin-left: 30px;
        }
        .tr1{
            background:#6ead6e6b;
        }

        .tr2{
            background:#b8b8ff87;
        }
        table{
            overflow-y: auto;
            white-space: nowrap;
            flex: 1 1 auto;
        }

        .autocomplete {
            /*the container must be positioned relative:*/
            position: relative;
            display: inline-block;
        }
        /* input {
            border: 1px solid transparent;
            background-color: #f1f1f1;
            padding: 10px;
            font-size: 16px;
        }
        input[type=text] {
            background-color: #f1f1f1;
            width: 100%;
        }
        input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
        } */
        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
        }
        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }
        .autocomplete-items div:hover {
            /*when hovering an item:*/
            background-color: #e9e9e9;
        }
        .autocomplete-active {
            /*when navigating through the items using the arrow keys:*/
            background-color: DodgerBlue !important;
            color: #ffffff;
        }
    </style>
{% endblock %}